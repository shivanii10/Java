Predefined Functional Interfaces:
-as we are talking about Functional Interfaces, 
-it will by default have only one method

--------------------------------------------------------------------------

1.Predicate
-it has only one method i.e. public boolean test(T t);
- test() can take any one input datatype but will return only boolean.

Syntax:
Predicate<Input Datatype> <object>= lambda exp;
Example:
Predicate<Integer> p1= n->n%2==0; // will return true if n is even otherwise false. 
p1.apply(4) -> true

--------------------------------------------------------------------------

2.Function
-it has only one method i.e. apply(T t);
- apply() can take any one input datatype and can return any datatype.

Syntax:
Function<Input Datatype,Return Datatype> <object>= lambda exp;
Example:
Function<Integer,Double> f1 = r-> 3.14*r*r; // will return area of circle. 
f1.apply(1) -> 3.14

--------------------------------------------------------------------------

3.Consumer
-it has only one method i.e. public void accept(T t);
-accept() can take any one input datatype but will NOT return anything.

Syntax:
Consumer<Input Datatype> <object>= lambda exp;
Example:
Consumer<Integer> c = n-> System.out.println("The square is  :"+n*n);
c.accept(9);

--------------------------------------------------------------------------

4.Supplier
-it has only one method i.e. public get();
-get() will Not take any input but can return any datatype.

Syntax:
Supplier<Return Datatype> <object>= lambda exp;
Example:
Supplier<String> s= ()->"hello";
System.out.println(s.get());